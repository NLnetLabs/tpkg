#!/bin/bash

# a utlity to run a shar test archive (aka tpkg)
# Created by Miek Gieben, NLnetLabs, (c) 2005
# Licensed under GPL version 2

export TPKG_VAR=".tpkg.var"
export TPKG_VERSION="1.02";
export SHELL="/bin/sh"
TPKG_BASE="."
TPKG_ARGS=""
TPKG_CURRENT=`pwd`
TPKG_QUIET=0
TPKG_KEEP=0    # tpkg create doesn't remove dir/

### Helper functions
function cleanup() {
        err "[log] Cleaning up" 
        [ -f result.$dsc_basename ] && cp result.$dsc_basename ../
        cd ..
	if [ ! -z "$dir" ]; then
		if [ -d "$dir" ]; then
			rm -rf $dir
		fi
	fi
	cd $TPKG_CURRENT
}

function cleanup_and_exit() {
        cleanup; exit 1
}

function err() {
        if [ -z $testname ]; then
                echo -e "  $1" >&2
        else
                echo -e "[$testname]  $1" >&2
        fi
}
function out() {
        if [ $TPKG_QUIET -eq 1 ]; then
                return
        fi
        if [ -z $testname ]; then
                echo -e "  $1"
        else
                echo -e "[$testname]  $1"
        fi
}

function epoch() {
        # make this sorta portable allthough not needed now
        epoch=0
        case $OSTYPE in
                linux*)
                epoch=`date +%s`
                ;;
                freebsd*)
                epoch=`date +%s`
                ;;
        esac
}

function post() {
        if [ -f "${dsc_post}" ]; then 
                err "[log] Executing post script: ${dsc_post} ${TPKG_ARGS}"
                ${SHELL} ${dsc_post} ${TPKG_ARGS}
                result=$?
                if [ $result -ne 0 ]; then
                        err "[warning] Post-script executed with errors: $result."
                fi
        fi
}

function pre() {
        if [ -f "${dsc_pre}" ]; then 
                err "[log] Executing pre script: ${dsc_pre} ${TPKG_ARGS}"
                ${SHELL} ${dsc_pre} ${TPKG_ARGS}
                result=$?
                if [ $result -ne 0 ]; then
                        err "[warning] Pre-script executed with errors: $result."
                fi
        fi
}
 
function write_done() {
        # we are executing in a subdir
        if [ -f "../.done-${testname}" ]; then
                err "[warning] Overwriting .done-${testname}"
        fi
        > ../.done-${testname}
}

# write done file in current dir
function write_fake_done() {
        if [ -f ".done-${testname}" ]; then
                err "[warning] Overwriting .done-${testname}"
        fi
        > .done-${testname}
}

function usage() {
        out "Usage:"
        out "$0 [OPTIONS] [exe|create|extract|tmpl|fake] test.tpkg"
        out "or:"
        out "$0 [OPTIONS] [report|clean|list|desc|help] test.tpkg"
        out "or:"
        out "$0 [OPTIONS] clone test1.tpkg test2.tpkg"
        out
        out "Testing"
        out " exe....:\texecute a test, safe the result result.testname"
        out " create.:\tcreate a .tpkg out of the test.{pre, post, test} files"
        out " extract:\textract a .tpkg to tmp. dir"
        out " tmpl...:\tcreate empty template files for a new test"
        out " fake...:\tfake the running of test, but do create a .done file"
        out
        out "Reporting/Cleanup"
        out " report.:\tcreate a nice report from all the result files"
        out " clean..:\tremove all the result files"
        out " clone..:\tclone test1.tpkg to test2.tkpg"
        out " list...:\tprint the files of the test to stdout"
        out " desc...:\tprint the test's description to stdout"
        out " help...:\tprint the help message for this test, if available"
        out
        out " When multiple tests depend on a single other test, this"
        out " other test is only executed once."
	out
	out "OPTIONS"
	out " -h\t\tshow this help"
	out " -v\t\tshow version"
        out " -q\t\tonly print errors to stdout"
        out " -k\t\tdon't remove test.dir when creating a tpkg package"
	out " -b DIR\tuse DIR is a base directory in stead of ."
	out " -a ARGS\tpass the string ARGS through to the test scripts"
        out 
        out " (C) NLnetLabs, Miek Gieben. Licensed under the GPL version 2."
}

function version() {
	out "tpkg (test package), version $TPKG_VERSION"
	out "Written by Miek Gieben, NLnet Labs"
	out
	out "Copyright (C) 2005 NLnet Labs"
	out
	out "This is free software; see the source for copying conditions. There is no"
	out "warranty; even not for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE"
}

function cleanreport() {
        # cleanup all the result. files
        for result in `ls result.* 2>/dev/null`; do 
                err "[log] rm $result"
                rm $result
        done
        # rm any .var files
        err "[log] rm $TPKG_VAR"
        rm -f $TPKG_VAR
        err "[log] rm .done files"
        rm -f .done*
	cd $TPKG_CURRENT
}

function report() {
        # generate a report from the result. files.
        passed=0
        failed=0
        unknown=0

        for result in `ls result.*`; do 
                passfailed=`head -1 $result | awk ' { print $2 }'`
                basename=`head -3 $result | grep BaseName | awk -F': ?' ' { print $2 }'`
                description=`head -4 $result | grep Description | awk -F': ?' ' { print $2 }'`
                runend=`head -2 $result | grep DateRunEnd | awk -F': ?' ' { print $2 }'`
                runstart=`head -5 $result | grep DateRunStart | awk -F': ?' ' { print $2 }'`

                if [ -z $runend ]; then
                        runend=0
                fi
                if [ -z $runstart ]; then
                        runstart=0
                fi

                ((period=$runend - $runstart))

                case $passfailed in
                "FAILED")
                        echo -e "!! $passfailed !! : $period s : $basename: $description"
                        ((failed=$failed + 1)) ;;
                "PASSED")
                        echo -e "** $passfailed ** : $period s : $basename: $description"
                        ((passed=$passed + 1)) ;;
                *) 
                        echo -e "-- $passfailed -- : $period s : $basename: $description"
                        ((unknown=$unknown + 1)) ;;
                esac
        done
        ((total=$passed + $failed + $unknown))
        fper=`echo -e "scale=2\n$failed/$total*100" | bc`
        pper=`echo -e "scale=2\n$passed/$total*100" | bc`
        uper=`echo -e "scale=2\n$unknown/$total*100" | bc`
        echo
        echo -e "PASSED: $passed ($pper %)\tFAILED: $failed ($fper %)\tUNKNOWN: $unknown ($uper %)"
	cd $TPKG_CURRENT
}

# clone test1 to test2
function clone() {
        $0 extract $test1.tpkg
        if [ $? -ne 0 ]; then
                err "[fatal] Extract of $test1.tpkg failed. Abort."
                exit 1
        fi

        if [ ! -d "$test1.dir" ]; then
                err "[fatal] No $test1.dir directory? Abort."
                exit 1
        fi
        cd $test1.dir
        for i in $test1.* ; do 
                ext=`echo $i | sed s/$test1//`
                if [ ! -z "$ext" ]; then
                        mv $i $test2$ext
                fi
        done
        # edit the dsc file too
        # don't use sed -i, its a gnu-ism
        sed  "s/$test1/$test2/g" < $test2.dsc > $test2.dsc.$$
        mv $test2.dsc.$$ $test2.dsc

        # update the date
        sed "s/^CreationDate:.*/CreationDate: `date`/"  < $test2.dsc > $test2.dsc.$$
        mv $test2.dsc.$$ $test2.dsc

        cd ..
        # rename the dir
        mv $test1.dir $test2.dir
        if [ $TPKG_KEEP -eq 0 ]; then
                $0 create $test2.tpkg
        else
                $0 -k create $test2.tpkg
        fi
        if [ $? -ne 0 ]; then
                err "[warning] Creating of $test2.tpkg failed."
        fi
	cd $TPKG_CURRENT
}

### MAIN 
# check the arguments
while getopts ":vhkqb:a:" o
do case "$o" in
	b) 	TPKG_BASE="$OPTARG";;
	h) 	usage; exit 0;;
	v) 	version; exit 0;;
	a) 	TPKG_ARGS="$OPTARG";;
        q)      TPKG_QUIET=1;;
        k)      TPKG_KEEP=1;;
        *)      err "[fatal] Unknown option. Abort."; exit 1;;
esac
done
shift $(($OPTIND - 1))

# go to the base dir
if [ ! -d $TPKG_BASE ]; then
	err "[fatal] Directory $TPKG_BASE does not exist. Abort"
	exit 1
else
	cd $TPKG_BASE
fi

# either create a tpkg (ie. call shar) or exe (do a test)
goal=$1
archive=$2
if [ -z "${goal}" ]; then
        usage
	cd $TPKG_CURRENT; exit 0
fi

### REPORT ###
# no extra args required
if [ "${goal}" = "report" ]; then
        report; exit 0
fi
if [ "${goal}" = "clean" ]; then
        cleanreport; exit 0
fi
if [ "${goal}" = "clone" ]; then
        test1=`basename $2 .tpkg`
        test2=`basename $3 .tpkg`;
        if [ -z "$test1" -o -z "$test2" ]; then
                usage; cd $TPKG_CURRENT; exit 0
        fi
        clone; exit 0
fi

if [ -z $archive ]; then
        usage; cd $TPKG_CURRENT; exit 0
fi

testname=`basename $archive .tpkg`
testpath=`dirname $archive`
dsc_file=$testname.dsc                  
if  [ -z $testname ]; then
        err "[fatal] The test package should have a .tpkg extension. Abort."
	cd $TPKG_CURRENT; exit 1
fi

if [ "${goal}" = "fake" ]; then
        err "[log] Writing .done-$testname file."
        write_fake_done; exit 0
fi

if [ $goal = "create" ]; then
### CREATE ###
# get all files with the same basename except those that ends in .tpkg

        # check for shar
        which shar >/dev/null
        if [ $? -ne 0 ]; then
                err "[fatal] Shar command not found. Abort."
                cd $TPKG_CURRENT; exit 1
        fi

        # assume there is a dir named $testname.dir
        if [ ! -d "${testname}.dir" ]; then
                err "[fatal] No $testname.dir directory found. Abort."
        	cd $TPKG_CURRENT; exit 1
        fi
        cd $testname.dir

        if [ -f $testname.tpkg ]; then
                err "[fatal] Not overwriting existing $testname.tpkg. Abort."
		cd $TPKG_CURRENT; exit 1
        fi
        i=$( ls $testname.* 2>/dev/null )
        if [ -z "${i}" ]; then
                err "[fatal] No $testname.* files found. Abort."
		cd $TPKG_CURRENT; exit 1
        fi
        shar $i > $testname.tpkg
        if [ $TPKG_KEEP -eq 0 ]; then
                rm $i
        fi
        mv $testname.tpkg ../
        cd ../
        if [ $TPKG_KEEP -eq 0 ]; then
                err "[log] Removing member files"
                rmdir $testname.dir
        fi
	cd $TPKG_CURRENT; exit 0
fi

### TMPL ####
# write out a .dsc and touch a .pre/.post/.test
if [ $goal = "tmpl" ]; then
        if [ -f $testname.dsc ]; then
                err "[fatal] $testname.dsc already exists. Abort."
		cd $TPKG_CURRENT; exit 1
        fi
        
        # make tmp dir
        dir="$testname.dir"
        mkdir $dir
        if [ ! -d $dir ]; then 
                err "[fatal] Failure to create a temporary working directory. Abort."
		cd $TPKG_CURRENT; exit 1
        fi
        cd $dir
        
        cat <<TMPL_EOF > $testname.dsc
BaseName: $testname
Version: 1.0
Description: [Put something nice here]
CreationDate: `date`
Maintainer: `grep $LOGNAME /etc/passwd | awk -F: ' { print $5 }' | sed s/,//g`
Category: 
Component:
Depends: 
Help: $testname.help
Pre: 
Post: 
Test: $testname.test
AuxFiles: 
Passed:
Failure:
TMPL_EOF
        # .help file
        echo "Please describe how to use this test."  > $testname.help
        echo "i.e. tpkg -a ARG exe testname:"  >> $testname.help
        echo "   ARG is used to ..."  >> $testname.help

        # .test file
        echo "# source the var file when it's there" > $testname.test
        echo "[ -f ../\$TPKG_VAR ] && source ../\$TPKG_VAR" >> $testname.test 
        echo "# svnserve resets the path, you may need to adjust it, like this:" >> $testname.test
        echo "#PATH=\$PATH:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:." >> $testname.test
        # .post file
        echo "# source the var file when it's there" > $testname.post
        echo "[ -f ../\$TPKG_VAR ] && source ../\$TPKG_VAR" >> $testname.post 
        echo "# svnserve resets the path, you may need to adjust it, like this:" >> $testname.post
        echo "#" >> $testname.post 
        echo "#" >> $testname.post
        echo "# do your teardown here" >> $testname.post
        echo "#" >> $testname.post 
        echo "#" >> $testname.post
        echo "# reset the tpkg.var file" >> $testname.post
        echo "echo \"export PATH=\$PATH >> ../\$TPKG_VAR\"" >> $testname.post
        echo "echo \"export LOGNAME=\$LOGNAME >> ../\$TPKG_VAR\"" >> $testname.post
        echo "echo \"export USERNAME=\$USERNAME >> ../\$TPKG_VAR\"" >> $testname.post

        # .pre file
        echo "# source the var file when it's there" > $testname.pre
        echo "[ -f ../\$TPKG_VAR ] && source ../\$TPKG_VAR" >> $testname.pre
        echo "# svnserve resets the path, you may need to adjust it, like this:" >> $testname.pre
        echo "#echo \"export PATH=\$PATH:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:.\"" >> $testname.pre

        out "[log] created $testname.{dsc, test, help, pre, post}"
        out "[log] please create the script(s) and then run: tpkg create $testname.tpkg"
        err "[log] created $testname in $dir."
	cd $TPKG_CURRENT; exit 0
fi

if [ ! -f $archive ]; then
        err "[fatal] Cannot find the test package: $archive. Abort"
        cd $TPKG_CURRENT; exit 1
fi

## EXTRACT
if [ $goal = "extract" ]; then
        dir="${testpath}/${testname}.dir"
        if [ -d $dir ]; then 
                err "[fatal] Directory $dir already exists. Abort."
		cd $TPKG_CURRENT; exit 1
        fi
        mkdir $dir
        if [ ! -d $dir ]; then 
                err "[fatal] Failure to create $dir directory. Abort."
		cd $TPKG_CURRENT; exit 1
        fi

        err "[log] Extracting..."
        cp $archive $dir/
        cd $dir
        ${SHELL} ./$testname.tpkg > /dev/null
        if [ $? -ne 0 ]; then
                err "[fatal] Could not unshar archive. Abort."
		cd $TPKG_CURRENT; exit 1
        fi

        trap cleanup_and_exit INT

        # stop here
        err "[log] extracted $testname.tpkg to $dir."
        rm ./$testname.tpkg
        cd $TPKG_CURRENT; exit 0
fi

## LIST OR DESC OR HELP
if [ $goal = "list" -o $goal = "desc" -o $goal = "help" ]; then
        # use the correct directory
        dir="${testpath}/${testname}.dir"
        if [ -d $dir ]; then 
                err "[fatal] Directory $dir already exists. Abort."
		cd $TPKG_CURRENT; exit 1
        fi
        mkdir $dir
        if [ ! -d $dir ]; then 
                err "[fatal] Failure to create $dir directory. Abort."
		cd $TPKG_CURRENT; exit 1
        fi

        cp $archive $dir/
        cd $dir
        ${SHELL} ./$testname.tpkg > /dev/null
        if [ $? -ne 0 ]; then
                err "[fatal] Could not unshar archive. Abort."
		cd $TPKG_CURRENT; exit 1
        fi

        trap cleanup_and_exit INT

        rm -f ./$testname.tpkg
        case $goal in
        list*)
                cat *
                ;;
        desc*)
                echo -n "$testname: "
                cat $testname.dsc | awk -F': ?' '/^Description/ { print $2 }'
                ;;
        help*)
                if [ -f $testname.help ]; then
                        cat $testname.help
                else
                        err "[warning] No help file found."
                fi
                ;;
        esac
        cd $TPKG_CURRENT
        # dir can go
        rm -rf $dir; exit 0
fi

trap cleanup_and_exit INT

# make a tmp dir during execution
if [ "$goal" != "exe" ]; then
        err "[fatal] What do you mean with $goal?. Abort"
	cd $TPKG_CURRENT; exit 1
fi

dir=`mktemp -d "${testpath}/${testname}.XXXXXX"`
if [ ! -d $dir ]; then 
        err "[fatal] Failure to create a temporary working directory. Abort."
	cd $TPKG_CURRENT; exit 1
fi
## EXTRACT
err "[log] Extracting..."
cp $archive $dir/
cd $dir
${SHELL} ${testname}.tpkg > /dev/null
if [ $? -ne 0 ]; then
        err "[fatal] Could not unshar archive. Abort."
	cd $TPKG_CURRENT; exit 1
fi

### EXE ###
# extract the information out of the *.dsc files
if [ ! -f $dsc_file ]; then
        err "[fatal] Can't locate the description file: $dsc_file. Abort."
        cleanup; exit 1
fi

SHELL=`which bash`
if [ -z ${SHELL} ]; then
       SHELL=/usr/local/bin/bash
       if [ ! -x $SHELL ]; then
               err "[fatal] Can't find the bash shell. Abort."
               cleanup; exit 1
       fi
fi

# check for a .done file
if [ -f "../.done-${testname}" ]; then
        err "[log] Found .done-${testname}. Not executing this test."
        cleanup; exit 0
fi

# this is the template for .dsc files
# we need to check if all these files also exist TODO
dsc_basename=$testname
dsc_version=`IFS=: awk -F': ?' < $dsc_file '/^Version/ { print $2 }'`
dsc_description=`IFS=: awk -F': ?' < $dsc_file '/^Description/ { print $2 }'`
dsc_creationdate=`IFS=: awk -F': ?' < $dsc_file '/^CreationDate/ { print $2 }'`
dsc_category=`IFS=: awk -F': ?' < $dsc_file '/^Category/ { print $2 }'`
dsc_component=`IFS=: awk -F': ?' < $dsc_file '/^Component/ { print $2 }'`
dsc_depends=`IFS=: awk -F': ?' < $dsc_file '/^Depends/ { print $2 }'`
dsc_maintainer=`IFS=: awk -F': ?' < $dsc_file '/^Maintainer/ { print $2 }'`
dsc_help=`IFS=: awk -F': ?' < $dsc_file '/^Help/ { print $2 }'`
dsc_pre=`IFS=: awk -F': ?' < $dsc_file '/^Pre/ { print $2 }'`
dsc_post=`IFS=: awk -F': ?' < $dsc_file '/^Post/ { print $2 }'`
dsc_test=`IFS=: awk -F': ?' < $dsc_file '/^Test/ { print $2 }'`
dsc_aux=`IFS=: awk -F': ?' < $dsc_file '/^AuxFiles/ { print $2 }'`
dsc_passed=`IFS=: awk -F': ?' < $dsc_file '/^Passed/ { print $2 }'`
dsc_failure=`IFS=: awk -F': ?' < $dsc_file '/^Failure/ { print $2 }'`

# consistency check the lot
for i in $dsc_pre $dsc_post $dsc_test $dsc_help; do
        if [ ! -z ${i} ]; then
                if [ ! -f "${i}" ]; then
                        err "[fatal] File defined, but ${i} cannot be found. Abort."
                        cleanup; exit 1
                fi
        fi
done

# if we depend on another test to that one first and then return
if [ -f "../${dsc_depends}" ]; then
        cd ..  # go up one dir
        err "[log] executing dependency test: $dsc_depends"
        ${SHELL} $0 "-b ${TPKG_BASE}" exe $dsc_depends
        test_result=$?
        cd - > /dev/null  # back where we belong
        if [ $test_result -ne 0 ]; then
                err "[fatal] Test depends on $dsc_depends which failed.  Abort."
                cleanup; exit 1
        fi
fi

# this enhances the template from above
## Post Processing of some of these variables
# dsc_aux is a comma seperated list of files, max 8 files
i=$( echo $dsc_aux | awk -F', ?' '{ print $1 "\n" $2 "\n" $3 "\n" $4 "\n" \
$5 "\n" $6 "\n" $7 "\n" $8 }' )
dsc_aux_files=($i)
dsc_aux_files_total=${#dsc_aux_files[*]}
# depends can also be a comma seperated list of package
# TODO

# check is the aux files are also really in the shar
for i in ${dsc_aux_files[*]}; do
        if [ ! -f $i ]; then
                err "[fatal] Aux. file $i must be in the archive. Abort"
                cleanup; exit 1
        fi
done

if [ ! -f $dsc_test ]; then
        err "[fatal] Can't locate the test script: $dsc_test. Abort"
        cleanup; exit 1
fi

### Actual executing of the scripts
epoch  # run before pre()
pre

err "[log] Executing test" 
echo "BaseName: $dsc_basename" > result.$dsc_basename
echo "Description: $dsc_description" >> result.$dsc_basename
echo "DateRunStart: $epoch " >> result.$dsc_basename
echo "--------------- Test Output ------------------" >> result.$dsc_basename
( ${SHELL} $dsc_test ${TPKG_ARGS} 2>&1 ) >> result.$dsc_basename
test_result=$?
epoch   # would like to run after post, but that is not possible :-(
if [ $test_result -ne 0 ]; then
        err "[warning] Test executed with errors: $test_result." 
        echo "!! FAILED !!     !! FAILED !!" > result.$dsc_basename.tmp
        echo "DateRunEnd: $epoch" >> result.$dsc_basename.tmp
        err "[log] !! FAILED !!"
        cat result.$dsc_basename >> result.$dsc_basename.tmp
        mv result.$dsc_basename.tmp result.$dsc_basename
        post; cleanup; exit 1
fi
 
cp -f result.$dsc_basename result.$dsc_basename.$$

failed=-1  # -1 undef, 0 passed, 1 failed
## PASSED
[ ! -z "${dsc_passed}" ] && egrep "${dsc_passed}" result.$dsc_basename.$$ > /dev/null
if [ $? -eq 0 ]; then
        err "[log] ** PASSED **"
        echo "** PASSED **     ** PASSED **" > result.$dsc_basename.tmp
        echo "DateRunEnd: $epoch" >> result.$dsc_basename.tmp
        cat result.$dsc_basename >> result.$dsc_basename.tmp
        mv result.$dsc_basename.tmp result.$dsc_basename
        write_done
        failed=0
fi 
## FAILED
[ ! -z "${dsc_failure}" ] && egrep "${dsc_failure}" result.$dsc_basename.$$ > /dev/null
# if not found this actually means PASSED
if [ $? -eq 0 ]; then
        err "[log] !! FAILED !!"
        echo "!! FAILED !!     !! FAILED !!" > result.$dsc_basename.tmp
        echo "DateRunEnd: $epoch" >> result.$dsc_basename.tmp
        cat result.$dsc_basename >> result.$dsc_basename.tmp
        mv result.$dsc_basename.tmp result.$dsc_basename
        failed=1
else
        err "[log] ** PASSED **"
        echo "** PASSED **     ** PASSED **" > result.$dsc_basename.tmp
        echo "DateRunEnd: $epoch" >> result.$dsc_basename.tmp
        cat result.$dsc_basename >> result.$dsc_basename.tmp
        mv result.$dsc_basename.tmp result.$dsc_basename
        write_done
        failed=0
fi

## UNKNOWN
if [ $failed -eq -1 ]; then
        # neither failed, not success, unknown
        err "[log] -- UNKNOWN --"
        echo "-- UNKNOWN --     -- UNKNOWN --" > result.$dsc_basename.tmp
        echo "DateRunEnd: $epoch" >> result.$dsc_basename.tmp
        cat result.$dsc_basename >> result.$dsc_basename.tmp
        mv result.$dsc_basename.tmp result.$dsc_basename
        write_done
        failed=1 # not passed
fi
        
post
cleanup
exit $failed
